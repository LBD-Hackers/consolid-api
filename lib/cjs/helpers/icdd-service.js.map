{"version":3,"sources":["../../../src/helpers/icdd-service.ts"],"names":["ICDDService","fetch","verbose","accessService","AccessService","dataService","DataService","rootURL","icddName","makePublic","baseURL","encodeURIComponent","console","time","createContainer","log","timeEnd","folderURLs","map","f","createFolderPromises","forEach","url","push","Promise","all","buildIndex","icddURL","deleteContainer","icddRootURL","files","addFiles","subfolder","containerURL","md5Promises","file","md5Hashes","uploadFilePromises","i","fileExtension","name","split","pop","fileName","addFileToIndex","fileURL","writeFileToPod","indexDataset","now","Date","containerDescription","addUrl","RDF","type","ICDD_C","ContainerDescription","addStringNoLocale","SCHEMA_INRUPT","addDatetime","creationDate","modificationDate","build","datasetWithAcl","format","filePath","newDocument","Document","filename","DCAT","downloadURL","find","item","indexOf","undefined","containsDocument"],"mappings":"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","sourcesContent":["import { AccessService } from \"./access-service\";\nimport { urlJoin } from 'url-join-ts';\nimport { DataService } from \"./data-service\";\nimport { computeChecksumMd5 } from './utils';\n\n// Import from \"@inrupt/solid-client\"\nimport {\n    createSolidDataset,\n    buildThing,\n    getSolidDataset,\n    createThing,\n    setThing,\n    setUrl,\n    addUrl,\n    getThingAll,\n    getUrlAll,\n    setDatetime,\n    saveSolidDatasetAt\n} from \"@inrupt/solid-client\";\n\nimport { RDF, SCHEMA_INRUPT, DCAT } from '@inrupt/vocab-common-rdf';\nimport ICDD_C from './vocab/icdd-c';\n\nexport class ICDDService{\n\n    public fetch;\n    public verbose: boolean = false;\n    public accessService: AccessService;\n    public dataService: DataService;\n\n    constructor(fetch: any, verbose: boolean = false){\n        this.fetch = fetch;\n        this.verbose = verbose;\n        this.accessService = new AccessService(fetch);\n        this.dataService = new DataService(fetch);\n    }\n\n    public async initICDD(rootURL: string, icddName: string, makePublic: boolean = false){\n\n        // Create main folder\n        const baseURL = urlJoin(rootURL, encodeURIComponent(icddName), \"/\");\n    \n        // Might fail if folders already exist\n        this.verbose && console.time(`Created root container for ICDD...`);\n        try{\n          await this.dataService.createContainer(baseURL, makePublic);\n        }catch(err){\n          this.verbose && console.log(`Could not create container ${baseURL}`);\n          throw err;\n        }\n        this.verbose && console.timeEnd(`Created root container for ICDD...`);\n        \n        // Create subfolders\n        this.verbose && console.time(`Created ICDD subfolders...`);\n        let folderURLs = [\"ontology_resources\", \"payload_triples\", \"payload_documents\"].map(f => urlJoin(rootURL, icddName, f, \"/\"));\n    \n        let createFolderPromises: Promise<any>[] = [];\n        folderURLs.forEach(url => {\n          createFolderPromises.push(this.dataService.createContainer(url, makePublic));\n        });\n        this.verbose && console.timeEnd(`Created ICDD subfolders...`);\n    \n        // Might fail if folders already exist\n        try{\n          await Promise.all(createFolderPromises);\n        }catch(err){\n          console.log(`Could not create sub-containers`);\n          throw err;\n        }\n    \n        // Add index.rdf\n        // Might fail if folders already exist\n        this.verbose && console.time(`Created index.rdf...`);\n        try{\n            await this.buildIndex(baseURL, icddName, makePublic);\n        }catch(err){\n            console.log(`Could not create index-file`);\n            throw err;\n        }\n        this.verbose && console.timeEnd(`Created index.rdf...`);\n    \n        return \"DONE\";\n    \n    }\n\n    public async deleteICDD(icddURL: string): Promise<string>{\n        await this.dataService.deleteContainer(icddURL);\n        return \"DONE\";\n    }\n\n    public async addPayloadDocuments(icddRootURL: string, files: File[], makePublic: boolean = false){\n        return this.addFiles(icddRootURL, \"payload_documents\", files, makePublic);\n    }\n\n    public async addPayloadTriples(icddRootURL: string, files: File[], makePublic: boolean = false){\n        return this.addFiles(icddRootURL, \"payload_triples\", files, makePublic);\n    }\n\n    public async addOntologyResources(icddRootURL: string, files: File[], makePublic: boolean = false){\n        return this.addFiles(icddRootURL, \"ontology_resources\", files, makePublic);\n    }\n\n    private async addFiles(icddRootURL: string, subfolder: string, files: File[], makePublic: boolean = false){\n\n        const containerURL = urlJoin(icddRootURL, subfolder, \"/\");\n\n        // 1. Calculate md5 hashes of files\n        const md5Promises: any = [];\n        files.forEach((file: File) => md5Promises.push(computeChecksumMd5(file)));\n        const md5Hashes = await Promise.all(md5Promises);\n\n        // 2. Upload the files and append them to index file while doing so\n        let uploadFilePromises: any[] = [];\n        files.forEach((file, i) => {\n            const fileExtension = file.name.split('.').pop() || \"txt\";\n            const fileName = `${md5Hashes[i]}.${fileExtension}`;\n\n            // Append file to index.rdf\n            uploadFilePromises.push(this.addFileToIndex(icddRootURL, fileName, fileExtension, subfolder))\n\n            // Upload file to payload_documents\n            const fileURL = urlJoin(containerURL, fileName);\n            uploadFilePromises.push(this.dataService.writeFileToPod(file, fileURL, makePublic));\n        })\n        await Promise.all(uploadFilePromises);\n\n        return \"DONE\";\n\n    }\n\n    private async buildIndex(rootURL: string, icddName: string, makePublic: boolean = true){\n\n        let indexDataset = createSolidDataset();\n\n        // Create container description\n        // Use various add functions to add properties to the Thing\n        // Note: solid-client functions do not modify objects passed in as arguments. \n        // Instead the functions return new objects with the modifications.\n        const now = new Date();\n        const containerDescription = buildThing(createThing())      // Build new resource (ID created by SDK)\n            .addUrl(RDF.type, ICDD_C.ContainerDescription)          // Define type\n            .addStringNoLocale(SCHEMA_INRUPT.name, icddName)        // Define name\n            .addDatetime(ICDD_C.creationDate, now)                  // Set creation date\n            .addDatetime(ICDD_C.modificationDate, now)              // Set modification date\n            .build();\n        \n        // Update SolidDataset with the containerDescription Thing.\n        // Note: solid-client functions do not modify objects passed in as arguments. \n        // Instead the functions return new objects with the modifications.\n        indexDataset = setThing(indexDataset, containerDescription);\n        \n        // Save the SolidDataset at the specified URL.\n        // The function returns a SolidDataset that reflects your sent data\n        const datasetWithAcl = await saveSolidDatasetAt(\n            urlJoin(rootURL, \"index\"),\n            indexDataset,\n            { fetch: this.fetch }\n        );\n\n        if(makePublic){\n            await this.accessService.makePublic(urlJoin(rootURL, \"index\"));\n        }\n\n        return datasetWithAcl;\n        \n\n    }\n\n    private async addFileToIndex(icddRootURL: string, fileName: string, format: string, subfolder: string){\n\n        const now = new Date();\n        const filePath = `/${subfolder}/${fileName}`;\n\n        // Get dataset\n        let indexDataset = await getSolidDataset(\n            urlJoin(icddRootURL, \"index\"),\n            { fetch: this.fetch }\n        );\n\n        // Add document\n        const newDocument = buildThing(createThing())               // Build new resource (ID created by SDK)\n            .addUrl(RDF.type, ICDD_C.Document)                      // Define type\n            .addStringNoLocale(ICDD_C.format, format)               // Set format\n            .addStringNoLocale(ICDD_C.filename, fileName)           // Set file name\n            .addStringNoLocale(DCAT.downloadURL, filePath)          // Set file path (Why is relative URI not supported?)\n            .addDatetime(ICDD_C.creationDate, now)                  // Set creation date\n            .addDatetime(ICDD_C.modificationDate, now)              // Set modification date\n            .build();\n        \n        indexDataset = setThing(indexDataset, newDocument);\n\n        // Get container description\n        let containerDescription = getThingAll(indexDataset).find(item => {\n            return getUrlAll(item, RDF.type).indexOf(ICDD_C.ContainerDescription) != -1;\n        });\n\n        // Make changes to container description\n        if(containerDescription != undefined){\n            // Update modification date\n            containerDescription = setDatetime(containerDescription, ICDD_C.modificationDate, now);\n\n            // Add reference to new document\n            containerDescription = addUrl(containerDescription, ICDD_C.containsDocument, newDocument);\n\n            // Update dataset\n            indexDataset = setThing(indexDataset, containerDescription);\n        }\n\n        // Save the SolidDataset at the specified URL.\n        // The function returns a SolidDataset that reflects your sent data\n        const datasetWithAcl = await saveSolidDatasetAt(\n            urlJoin(icddRootURL, \"index\"),\n            indexDataset,\n            { fetch: this.fetch }\n        );\n\n        return datasetWithAcl;\n    }\n\n}"],"file":"icdd-service.js"}