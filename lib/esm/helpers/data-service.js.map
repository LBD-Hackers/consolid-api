{"version":3,"sources":["../../../src/helpers/data-service.ts"],"names":["DataService","verbose","constructor","fetch","accessService","AccessService","writeFileToPod","file","targetFileURL","makePublic","contentType","Mimetype","Text","savedFile","console","log","makeFilePublic","getFile","fileURL","deleteFile","deleteContainer","containerURL","includeSubContainers","dataset","containerResources","resource","createContainer","datasetWithAcl"],"mappings":"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","sourcesContent":["// Import from \"@inrupt/solid-client\"\nimport {\n    getSolidDataset,\n    getFile,\n    createContainerAt,\n    deleteFile,\n    deleteContainer,\n    getContainedResourceUrlAll,\n    overwriteFile,\n    getSourceUrl,\n    isContainer\n} from \"@inrupt/solid-client\";\nimport { AccessService } from \"./access-service\";\nimport { Mimetype } from \"./BaseDefinitions\";\n\nexport class DataService{\n\n    public fetch;\n    public verbose: boolean = false;\n    public accessService: AccessService;\n\n    constructor(fetch: any, verbose: boolean = false){\n        this.fetch = fetch;\n        this.verbose = verbose;\n        this.accessService = new AccessService(fetch);\n    }\n\n    /**\n     * FILES\n     */\n\n    // Upload File to the targetFileURL.\n    // If the targetFileURL exists, overwrite the file.\n    // If the targetFileURL does not exist, create the file at the location.\n    public async writeFileToPod(file: File|Buffer, targetFileURL: string, makePublic: boolean = false, contentType: Mimetype = Mimetype.Text) {\n\n        const savedFile = await overwriteFile(\n          targetFileURL,                            // URL for the file.\n          file,                                     // File\n          { contentType, fetch: this.fetch }        // mimetype if known, fetch from the authenticated session\n        );\n        this.verbose && console.log(`File saved at ${getSourceUrl(savedFile)}`);\n\n        if(makePublic){\n            await this.accessService.makeFilePublic(targetFileURL);\n        }\n\n        return savedFile;\n\n    }\n\n    public async getFile(fileURL: string) {\n        this.verbose && console.log(`Getting file ${fileURL}...`);\n        return getFile(\n            fileURL,                // File in Pod to Read\n            { fetch: this.fetch }   // fetch from authenticated session\n        );\n    }\n\n    public async deleteFile(fileURL: string) {\n        this.verbose && console.log(`Deleting file ${fileURL}...`);\n        return deleteFile(\n            fileURL,                // File in Pod to Read\n            { fetch: this.fetch }   // fetch from authenticated session\n        );\n    }\n\n    /**\n     * CONTAINERS\n     */\n\n    public async deleteContainer(containerURL: string, includeSubContainers: boolean = true) {\n\n        // If deleting subcontainers, we need to first get these\n        if(includeSubContainers){\n            console.log(`Deleting container ${containerURL} including its subfolders...`);\n            const dataset = await getSolidDataset( containerURL, { fetch: this.fetch } );\n            const containerResources = await getContainedResourceUrlAll( dataset );\n\n            // Delete resources (containers and files)\n            for(let resource of containerResources){\n                if(isContainer(resource)){\n                    await this.deleteContainer(resource, true);\n                }\n                else{\n                    await this.deleteFile(resource);\n                }\n            }\n        }\n\n        console.log(`Deleting container ${containerURL}...`);\n        return deleteContainer( containerURL, { fetch: this.fetch } );\n        \n    }\n\n    public async createContainer(containerURL: string, makePublic: boolean = false) {\n        \n        this.verbose && console.log(`Creating container ${containerURL}...`);\n\n        const datasetWithAcl = await createContainerAt(\n            containerURL,           // File in Pod to Read\n            { fetch: this.fetch }   // fetch from authenticated session\n        );\n\n        if(makePublic){\n            await this.accessService.makePublic(containerURL);\n        }\n\n        return datasetWithAcl;\n    }\n\n}"],"file":"data-service.js"}