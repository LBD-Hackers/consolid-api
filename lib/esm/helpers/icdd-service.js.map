{"version":3,"sources":["../../../src/helpers/icdd-service.ts"],"names":["ICDDService","verbose","constructor","fetch","accessService","AccessService","dataService","DataService","initICDD","rootURL","icddName","makePublic","baseURL","encodeURIComponent","console","time","createContainer","err","log","timeEnd","folderURLs","map","f","createFolderPromises","forEach","url","push","Promise","all","buildIndex","deleteICDD","icddURL","deleteContainer","addPayloadDocuments","icddRootURL","files","addFiles","addPayloadTriples","addOntologyResources","subfolder","containerURL","md5Promises","file","md5Hashes","uploadFilePromises","i","fileExtension","name","split","pop","fileName","addFileToIndex","fileURL","writeFileToPod","indexDataset","now","Date","containerDescription","addUrl","RDF","type","ICDD_C","ContainerDescription","addStringNoLocale","SCHEMA_INRUPT","addDatetime","creationDate","modificationDate","build","datasetWithAcl","format","filePath","newDocument","Document","filename","DCAT","downloadURL","find","item","indexOf","undefined","containsDocument"],"mappings":"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","sourcesContent":["import { AccessService } from \"./access-service\";\nimport { urlJoin } from 'url-join-ts';\nimport { DataService } from \"./data-service\";\nimport { computeChecksumMd5 } from './utils';\n\n// Import from \"@inrupt/solid-client\"\nimport {\n    createSolidDataset,\n    buildThing,\n    getSolidDataset,\n    createThing,\n    setThing,\n    setUrl,\n    addUrl,\n    getThingAll,\n    getUrlAll,\n    setDatetime,\n    saveSolidDatasetAt\n} from \"@inrupt/solid-client\";\n\nimport { RDF, SCHEMA_INRUPT, DCAT } from '@inrupt/vocab-common-rdf';\nimport ICDD_C from './vocab/icdd-c';\n\nexport class ICDDService{\n\n    public fetch;\n    public verbose: boolean = false;\n    public accessService: AccessService;\n    public dataService: DataService;\n\n    constructor(fetch: any, verbose: boolean = false){\n        this.fetch = fetch;\n        this.verbose = verbose;\n        this.accessService = new AccessService(fetch);\n        this.dataService = new DataService(fetch);\n    }\n\n    public async initICDD(rootURL: string, icddName: string, makePublic: boolean = false){\n\n        // Create main folder\n        const baseURL = urlJoin(rootURL, encodeURIComponent(icddName), \"/\");\n    \n        // Might fail if folders already exist\n        this.verbose && console.time(`Created root container for ICDD...`);\n        try{\n          await this.dataService.createContainer(baseURL, makePublic);\n        }catch(err){\n          this.verbose && console.log(`Could not create container ${baseURL}`);\n          throw err;\n        }\n        this.verbose && console.timeEnd(`Created root container for ICDD...`);\n        \n        // Create subfolders\n        this.verbose && console.time(`Created ICDD subfolders...`);\n        let folderURLs = [\"ontology_resources\", \"payload_triples\", \"payload_documents\"].map(f => urlJoin(rootURL, icddName, f, \"/\"));\n    \n        let createFolderPromises: Promise<any>[] = [];\n        folderURLs.forEach(url => {\n          createFolderPromises.push(this.dataService.createContainer(url, makePublic));\n        });\n        this.verbose && console.timeEnd(`Created ICDD subfolders...`);\n    \n        // Might fail if folders already exist\n        try{\n          await Promise.all(createFolderPromises);\n        }catch(err){\n          console.log(`Could not create sub-containers`);\n          throw err;\n        }\n    \n        // Add index.rdf\n        // Might fail if folders already exist\n        this.verbose && console.time(`Created index.rdf...`);\n        try{\n            await this.buildIndex(baseURL, icddName, makePublic);\n        }catch(err){\n            console.log(`Could not create index-file`);\n            throw err;\n        }\n        this.verbose && console.timeEnd(`Created index.rdf...`);\n    \n        return \"DONE\";\n    \n    }\n\n    public async deleteICDD(icddURL: string): Promise<string>{\n        await this.dataService.deleteContainer(icddURL);\n        return \"DONE\";\n    }\n\n    public async addPayloadDocuments(icddRootURL: string, files: File[], makePublic: boolean = false){\n        return this.addFiles(icddRootURL, \"payload_documents\", files, makePublic);\n    }\n\n    public async addPayloadTriples(icddRootURL: string, files: File[], makePublic: boolean = false){\n        return this.addFiles(icddRootURL, \"payload_triples\", files, makePublic);\n    }\n\n    public async addOntologyResources(icddRootURL: string, files: File[], makePublic: boolean = false){\n        return this.addFiles(icddRootURL, \"ontology_resources\", files, makePublic);\n    }\n\n    private async addFiles(icddRootURL: string, subfolder: string, files: File[], makePublic: boolean = false){\n\n        const containerURL = urlJoin(icddRootURL, subfolder, \"/\");\n\n        // 1. Calculate md5 hashes of files\n        const md5Promises: any = [];\n        files.forEach((file: File) => md5Promises.push(computeChecksumMd5(file)));\n        const md5Hashes = await Promise.all(md5Promises);\n\n        // 2. Upload the files and append them to index file while doing so\n        let uploadFilePromises: any[] = [];\n        files.forEach((file, i) => {\n            const fileExtension = file.name.split('.').pop() || \"txt\";\n            const fileName = `${md5Hashes[i]}.${fileExtension}`;\n\n            // Append file to index.rdf\n            uploadFilePromises.push(this.addFileToIndex(icddRootURL, fileName, fileExtension, subfolder))\n\n            // Upload file to payload_documents\n            const fileURL = urlJoin(containerURL, fileName);\n            uploadFilePromises.push(this.dataService.writeFileToPod(file, fileURL, makePublic));\n        })\n        await Promise.all(uploadFilePromises);\n\n        return \"DONE\";\n\n    }\n\n    private async buildIndex(rootURL: string, icddName: string, makePublic: boolean = true){\n\n        let indexDataset = createSolidDataset();\n\n        // Create container description\n        // Use various add functions to add properties to the Thing\n        // Note: solid-client functions do not modify objects passed in as arguments. \n        // Instead the functions return new objects with the modifications.\n        const now = new Date();\n        const containerDescription = buildThing(createThing())      // Build new resource (ID created by SDK)\n            .addUrl(RDF.type, ICDD_C.ContainerDescription)          // Define type\n            .addStringNoLocale(SCHEMA_INRUPT.name, icddName)        // Define name\n            .addDatetime(ICDD_C.creationDate, now)                  // Set creation date\n            .addDatetime(ICDD_C.modificationDate, now)              // Set modification date\n            .build();\n        \n        // Update SolidDataset with the containerDescription Thing.\n        // Note: solid-client functions do not modify objects passed in as arguments. \n        // Instead the functions return new objects with the modifications.\n        indexDataset = setThing(indexDataset, containerDescription);\n        \n        // Save the SolidDataset at the specified URL.\n        // The function returns a SolidDataset that reflects your sent data\n        const datasetWithAcl = await saveSolidDatasetAt(\n            urlJoin(rootURL, \"index\"),\n            indexDataset,\n            { fetch: this.fetch }\n        );\n\n        if(makePublic){\n            await this.accessService.makePublic(urlJoin(rootURL, \"index\"));\n        }\n\n        return datasetWithAcl;\n        \n\n    }\n\n    private async addFileToIndex(icddRootURL: string, fileName: string, format: string, subfolder: string){\n\n        const now = new Date();\n        const filePath = `/${subfolder}/${fileName}`;\n\n        // Get dataset\n        let indexDataset = await getSolidDataset(\n            urlJoin(icddRootURL, \"index\"),\n            { fetch: this.fetch }\n        );\n\n        // Add document\n        const newDocument = buildThing(createThing())               // Build new resource (ID created by SDK)\n            .addUrl(RDF.type, ICDD_C.Document)                      // Define type\n            .addStringNoLocale(ICDD_C.format, format)               // Set format\n            .addStringNoLocale(ICDD_C.filename, fileName)           // Set file name\n            .addStringNoLocale(DCAT.downloadURL, filePath)          // Set file path (Why is relative URI not supported?)\n            .addDatetime(ICDD_C.creationDate, now)                  // Set creation date\n            .addDatetime(ICDD_C.modificationDate, now)              // Set modification date\n            .build();\n        \n        indexDataset = setThing(indexDataset, newDocument);\n\n        // Get container description\n        let containerDescription = getThingAll(indexDataset).find(item => {\n            return getUrlAll(item, RDF.type).indexOf(ICDD_C.ContainerDescription) != -1;\n        });\n\n        // Make changes to container description\n        if(containerDescription != undefined){\n            // Update modification date\n            containerDescription = setDatetime(containerDescription, ICDD_C.modificationDate, now);\n\n            // Add reference to new document\n            containerDescription = addUrl(containerDescription, ICDD_C.containsDocument, newDocument);\n\n            // Update dataset\n            indexDataset = setThing(indexDataset, containerDescription);\n        }\n\n        // Save the SolidDataset at the specified URL.\n        // The function returns a SolidDataset that reflects your sent data\n        const datasetWithAcl = await saveSolidDatasetAt(\n            urlJoin(icddRootURL, \"index\"),\n            indexDataset,\n            { fetch: this.fetch }\n        );\n\n        return datasetWithAcl;\n    }\n\n}"],"file":"icdd-service.js"}